{"version":3,"sources":["component/Movie.js","component/MovieGroup.js","App.js","serviceWorker.js","index.js"],"names":["Movie","props","movie","style","container","src","image","alt","title","display","flexDirection","margin","padding","backgroundColor","borderRadius","marginBottom","fontSize","MovieGroup","movieGroup","groupName","movies","groupNameContainer","moviesContainer","map","index","key","maxWidth","width","border","overflowX","paddingBottom","apiUrl","groupType","imageType","App","handleScroll","event","scrollHeight","document","documentElement","scrollTop","percent","console","log","retrieveData","fetch","replace","state","page","method","then","response","json","feed","extractFeed","catch","error","movieGroups","data","filter","group","type","row_name","poster","images","posterUrl","url","newMovieGroup","setState","paegLoading","window","addEventListener","this","prevProps","prevState","onScroll","React","Component","textAlign","minHeight","alignItems","justifyContent","color","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5072241e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Movie(props) {\r\n\tconst { movie } = props;\r\n\treturn (\r\n\t\t<div style={style.container}>\r\n\t\t\t<img src={movie.image} style={style.image} alt='NA'></img>\r\n\t\t\t<span style={style.title}>{movie.title}</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst style = {\r\n\tcontainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tmargin: '10px',\r\n\t\tpadding: '10px',\r\n\t\tbackgroundColor: '#36404a',\r\n\t\tborderRadius: '5px',\r\n\t},\r\n\timage: {\r\n\t\tmarginBottom: '5px',\r\n\t},\r\n\ttitle: {\r\n\t\tfontSize: '0.9rem'\r\n\t}\r\n}","import React from 'react';\r\nimport Movie from './Movie';\r\n\r\nexport default function MovieGroup(props) {\r\n\tconst { groupName, movies } = props.movieGroup;\r\n\treturn (\r\n\t\t<div style={style.container}>\r\n\t\t\t<div style={style.groupNameContainer}>\r\n\t\t\t\t<span>{groupName}</span>\r\n\t\t\t</div>\r\n\t\t\t<div style={style.moviesContainer}>\r\n\t\t\t\t{movies.map((movie, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Movie key={index} movie={movie} />\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nconst style = {\r\n\tcontainer: {\r\n\t\tmaxWidth: '100%',\r\n\t\twidth: '100%',\r\n\t\tborder: '3px solid white',\r\n\t\tborderRadius: '5px',\r\n\t\tmarginBottom: '20px',\r\n\t},\r\n\tgroupNameContainer: {\r\n\t\tmargin: '10px 0px',\r\n\t\tfontSize: '2rem',\r\n\t},\r\n\tmoviesContainer: {\r\n\t\tdisplay: 'flex',\r\n\t\toverflowX: 'auto',\r\n\t\tpaddingBottom: '20px',\r\n\t}\r\n};","import React from 'react';\nimport MovieGroup from './component/MovieGroup';\nimport './App.css';\n\nconst apiUrl = 'https://cdn-discover.hooq.tv/v1.2/discover/feed?region=ID&page=[page]&perPage=20';\nconst groupType = 'Multi-Title-Manual-Curation';\nconst imageType = 'POSTER';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page: 1,\n      paegLoading: false,\n      movieGroups: []\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n    console.log('componentDidMount page: ' + this.state.page);\n    this.retrieveData();\n    // this.setState({ page: 1 });\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   const sameLength = this.state.movieGroups.length === nextState.movieGroups.length;\n  //   const samePage = this.state.page === nextState.page; \n  //   console.log(`${this.state.movieGroups.length} vs ${nextState.movieGroups.length}`);\n\n  //   if (samePage) return false;\n  //   return false;\n  // }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('componentDidUpdate page: ' + this.state.page);\n    if (this.state.page !== prevState.page) {\n      this.retrieveData();\n    }\n  }\n\n  handleScroll = (event) => {\n    // debugger;\n    // document.documentElement.scrollHeight\n    const scrollHeight = document.documentElement.scrollHeight;\n    const scrollTop = document.documentElement.scrollTop;\n    const percent = scrollTop / scrollHeight;\n    console.log(`scrollHeight: ${scrollHeight}, scrollTop: ${scrollTop}, percent: ${percent}`);\n    if (percent > 0.8) {\n      console.log('go load new page');\n      // this.setState((state) => {\n      //   return { page: state.page + 1 };\n      // });\n      this.retrieveData();\n    }\n  }\n\n  retrieveData = () => {\n    fetch(apiUrl.replace('[page]', this.state.page + 1), { method: 'GET' })\n    .then((response) => {\n      return response.json();\n    })\n    .then((feed) => {\n      this.extractFeed(feed);\n    })\n    .catch((error) => {\n      console.log('Request failed', error);\n    });\n  }\n\n  extractFeed = (feed) => {\n    const groups = feed.data;\n    const multiTitleGroups = groups.filter(group => group.type === groupType);\n    const movieGroups = multiTitleGroups.map(group => {\n      const groupName = group.row_name;\n      const movies = group.data.map(movie => {\n        const poster = movie.images.filter(image => image.type === imageType)[0];\n        const posterUrl = poster ? poster.url : ''; \n        return {\n          title: movie.title,\n          image: posterUrl, \n        }\n      });\n      return { groupName, movies }\n    })\n    const newMovieGroup = [ ...this.state.movieGroups, ...movieGroups ];\n    this.setState({ movieGroups: newMovieGroup });\n  }\n\n  render() {\n    return (\n      <div style={style.container} onScroll={this.handleScroll}>\n        {this.state.movieGroups.map((movieGroup, index) => {\n          return (\n            <MovieGroup key={index} movieGroup={movieGroup} />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst style = {\n  container: {\n    textAlign: 'center',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 'calc(10px + 2vmin)',\n    color: 'white',\n    padding: '20px',\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}